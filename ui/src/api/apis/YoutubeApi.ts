/* tslint:disable */
/* eslint-disable */
/**
 * Engawa
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelInfo,
  HTTPValidationError,
  Video,
} from '../models/index';
import {
    ChannelInfoFromJSON,
    ChannelInfoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    VideoFromJSON,
    VideoToJSON,
} from '../models/index';

export interface FetchRssRouteApiGetChannelInfoPostRequest {
    channelUrl: string;
}

export interface GetVideosRouteApiGetVideosGetRequest {
    rssUrl: string;
}

/**
 * 
 */
export class YoutubeApi extends runtime.BaseAPI {

    /**
     * Fetch Rss Route
     */
    async fetchRssRouteApiGetChannelInfoPostRaw(requestParameters: FetchRssRouteApiGetChannelInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelInfo>> {
        if (requestParameters['channelUrl'] == null) {
            throw new runtime.RequiredError(
                'channelUrl',
                'Required parameter "channelUrl" was null or undefined when calling fetchRssRouteApiGetChannelInfoPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['channelUrl'] != null) {
            queryParameters['channel_url'] = requestParameters['channelUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/get_channel_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelInfoFromJSON(jsonValue));
    }

    /**
     * Fetch Rss Route
     */
    async fetchRssRouteApiGetChannelInfoPost(requestParameters: FetchRssRouteApiGetChannelInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelInfo> {
        const response = await this.fetchRssRouteApiGetChannelInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Videos Route
     */
    async getVideosRouteApiGetVideosGetRaw(requestParameters: GetVideosRouteApiGetVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Video>>> {
        if (requestParameters['rssUrl'] == null) {
            throw new runtime.RequiredError(
                'rssUrl',
                'Required parameter "rssUrl" was null or undefined when calling getVideosRouteApiGetVideosGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['rssUrl'] != null) {
            queryParameters['rss_url'] = requestParameters['rssUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/get_videos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VideoFromJSON));
    }

    /**
     * Get Videos Route
     */
    async getVideosRouteApiGetVideosGet(requestParameters: GetVideosRouteApiGetVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Video>> {
        const response = await this.getVideosRouteApiGetVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
